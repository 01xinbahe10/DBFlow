# Kotlin Support + Extensions

DBFlow supports Kotlin out of the box and is fairly easily to use and implement.

Currently, we cannot write DBFlow classes in Kotlin, due to some bugs with the generated
Java classes that DBFlow creates are not found in Kotlin files when compiling.

## Extensions

DBFlow as of `3.0.0-beta4` contains some extensions for use in Kotlin. These
are defined in a separate dependency:

```
dependencies {
  compile "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:${dbflow_version}"
}

```

### Query Extensions

Note that these features are incubating and may change or get removed in a later version.

__Query DSL__:

Select

```kotlin

var items = select {
  from<SomeTable> {
    where {
      SomeTable_Table.name.eq("something")
    }.
    and {
      SomeTable_Table.job.eq("Software Engineer")
    }
  }
}.queryList()

var another = select {
    from<TestModel1> {
        join<TestModel1, TestModel2>(INNER) {
            on { TestModel2_Table.name.withTable().eq(TestModel1_Table.name.withTable()) }
        }

        join<TestModel1, TestModel3>(LEFT_OUTER) {
            on { TestModel1_Table.name.withTable().eq(TestModel3_Table.name.withTable()) }
        }
    }
}

```

Insert

```kotlin

var query = insert<TestModel1> {
           orReplace()
           into(KotlinTestModel_Table.id to 5, KotlinTestModel_Table.name to "5")
       }

```

We added an `into` method that takes in a `Pair<IProperty<*>, *>` to allow you
to specify values a little easier when using `Insert` statement wrappers.

Delete

```kotlin

delete<TestModel1> {
    where {
        TestModel1_Table.name.eq("test")
    }
}.execute()

```

Update

```kotlin
update<TestModel1> {
    set {
        conditions(TestModel1_Table.name.`is`("yes"))
        where { TestModel1_Table.name.eq("no") }
                .and { TestModel1_Table.name.eq("maybe") }
    }
}.execute()
```
