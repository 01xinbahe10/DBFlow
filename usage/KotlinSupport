# Kotlin Support + Extensions

DBFlow supports Kotlin out of the box and is fairly easily to use and implement.

An example table written in Kotlin may look like:

```
@Table(database = MyDatabase::class)
class SomeModel : BaseModel() {

    @PrimaryKey(autoincrement = true)
    var id: Int = 0

    @Column
    var name: String? = null
}
```

The `var` must be accessible and by default DBFlow treats them as private fields
and uses getters and setters generated by Kotlin.

## Extensions

DBFlow as of `3.0.0-beta4` contains some extensions for use in Kotlin. These
are defined in a separate dependency:

```
dependencies {
  compile "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:${dbflow_version}"
}

```


### Query Extensions

Note that these features are incubating and may change or get removed in a later version.

__Query DSL__:

```kotlin

var items = select {
  from<SomeTable> {
    where {
      SomeTable_Table.name.eq("something")
    }.
    and {
      SomeTable_Table.job.eq("Software Engineer")
    }
  }
}.queryList()

```
